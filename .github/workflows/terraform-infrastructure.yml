name: Terraform Infrastructure

on:
  push:
    branches: [ main ]
    paths: [ 'environments/**', 'backend-setup/**', 'modules/**' ]
  pull_request:
    branches: [ main ]
    paths: [ 'environments/**', 'backend-setup/**', 'modules/**' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run against (dev|staging|prod). If empty, runs for all in matrix for plan/apply as configured.'
        required: false

env:
  AWS_REGION: us-east-1
  TF_VERSION: 1.5.0
  BACKEND_BUCKET: microservices-eks-terraform-state-joy
  BACKEND_DYNAMODB_TABLE: microservices-eks-terraform-locks

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    strategy:
      matrix:
        environment: [ dev, staging, prod ]

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Init
      working-directory: environments/${{ matrix.environment }}
      run: |
        terraform init -backend-config="bucket=${{ env.BACKEND_BUCKET }}" \
                        -backend-config="key=${{ matrix.environment }}/terraform.tfstate" \
                        -backend-config="region=${{ env.AWS_REGION }}" \
                        -backend-config="dynamodb_table=${{ env.BACKEND_DYNAMODB_TABLE }}" \
                        -backend-config="encrypt=true"

    - name: Terraform Plan
      working-directory: environments/${{ matrix.environment }}
      run: terraform plan -no-color
      continue-on-error: true

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    strategy:
      matrix:
        environment: [ dev, staging, prod ]

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Init
      working-directory: environments/${{ matrix.environment }}
      run: |
        terraform init -backend-config="bucket=${{ env.BACKEND_BUCKET }}" \
                        -backend-config="key=${{ matrix.environment }}/terraform.tfstate" \
                        -backend-config="region=${{ env.AWS_REGION }}" \
                        -backend-config="dynamodb_table=${{ env.BACKEND_DYNAMODB_TABLE }}" \
                        -backend-config="encrypt=true"

    - name: Terraform Apply
      working-directory: environments/${{ matrix.environment }}
      run: |
        # If workflow_dispatch provided an environment, only run that one
        if [ -n "${{ github.event.inputs.environment }}" ] && [ "${{ github.event.inputs.environment }}" != "${{ matrix.environment }}" ]; then
          echo "Skipping ${matrix.environment} because workflow_dispatch requested ${ { github.event.inputs.environment } }"
          exit 0
        fi
        terraform apply -auto-approve

    - name: Output cluster info (if present)
      working-directory: environments/${{ matrix.environment }}
      run: |
        if terraform output -json >/dev/null 2>&1; then
          echo "Terraform outputs for ${{ matrix.environment }}:"
          terraform output
        else
          echo "No terraform outputs or not an infra module for ${{ matrix.environment }}"
        fi

    - name: Create run info artifact
      working-directory: environments/${{ matrix.environment }}
      run: |
        # create a small file with environment and cluster name to help downstream workflows detect target
        echo "environment=${{ matrix.environment }}" > run-info.txt
        cluster=$(terraform output -raw eks_cluster_name 2>/dev/null || terraform output -raw cluster_name 2>/dev/null || echo "")
        if [ -n "$cluster" ]; then
          echo "cluster=${cluster}" >> run-info.txt
        fi

    - name: Upload run info artifact
      uses: actions/upload-artifact@v4
      with:
        name: tf-run-info-${{ matrix.environment }}
        path: environments/${{ matrix.environment }}/run-info.txt


        # terraform infrastructure